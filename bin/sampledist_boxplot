#!/usr/bin/env Rscript
#sampledist_boxplot -m meta.rds -r rpkm.rds -o sample.cor.pdf -q qc.meta.rds
#Plot boxplot of pairwise correlations for each sample



###
#Get opt
###
library('getopt')

argv = commandArgs(trailingOnly = F)  
scriptPath = dirname(sub("--file=", "", argv[grep("--file", argv)]))
#source(file.path(scriptPath, '../lib/getopt.R')) #If one wants to avoid dependency of installed R package (getopt).
argv = commandArgs(trailingOnly = T)

spec = matrix(c(
  'meta.file', 'm', 1, 'character',
  'rpkm.file', 'r', 1, 'character',
  'sample.cor.pdf', 'o', 1, 'character',
  'qc.meta.file', 'q', 1, 'character',
  'cor.meth', 'c', 1, 'character',
  'max.cor.cutoff', 'u', 1, 'double',
  'cor.res.file', 'e', 1, 'character',
  'cex.axis', 'x', 1, 'double',
  'filter.bool', 'f', 1, 'logical',
  'plot.bool', 'p', 1, 'logical',
  'lib.dir', 'l', 1, 'character',
  'help', 'h', 0, 'logical'
), byrow=TRUE, ncol=4);
opt = getopt(spec)

usage <- function(spec){
  cat(getopt(spec, command = 'sampledist_boxplot', usage=TRUE));
  cat(sprintf("Plot boxplot of pairwise correlations for each sample and set filter based on closest neighbor correlation\n"))
  cat(sprintf(" -m meta.file\n\tInput file in rds-format, containing mapping statistics (output by the program get_meta).\n"))
  cat(sprintf(" -r rpkm.file\n\tInput file in rds-format, containing normalized read counts for all samples and features (output by the program get_expr).\n"))
  cat(sprintf(" -o sample.cor.pdf\n\tOutput file to which the plot is printed. It is required to contain the string 'cor'. Default: sample.cor.pdf\n"))
  cat(sprintf(" -q qc.meta.file\n\tOutput file in rds-format to which qc-failed samples are stored. If the file already exists a column is added and if the column already exists (n.genes.expr) it is updated. Default: qc.meta.rds\n"))
  cat(sprintf(" -c cor.meth\n\tCorrelation method, see the fcn \"cor\". Default: spearman\n"))
  cat(sprintf(" -u max.cor.cutoff\n\tCorrelation cutoff where samples are flagged as failed if its closest neighbor has a correlation smaller than the cutoff. Default: 0.2\n"))
  cat(sprintf(" -e cor.res.file\n\tFile in rds-format with a list containing correlation result data-structures. If the file already exists the correlation results are read from it instead of being recalculated. Default: NA\n"))
  cat(sprintf(" -x cex.axis\n\tText magnification factor. Default: 0.3\n"))
  cat(sprintf(" -f filter\n\tSave qc-failed samples or not to qc.meta.file (option -q). Allowed values: {TRUE, FALSE}. Default: TRUE\n"))
  cat(sprintf(" -p plot\n\tPlot smoothed histogram of the number of expressed genes per sample. Allowed values: {TRUE, FALSE}. Default: TRUE\n"))
  cat(sprintf(" -l lib.dir\n\tLibrary directory with required R functions. Default: A subdir residing at '../lib' relative to where this program was executed from.\n\n"))
  q(status=1);
}

#Print usage if help flag set
if(!is.null(opt[['help']])){
  usage(spec)
}

#Error check that all required options were set
if(is.null(opt[['meta.file']])){warning('Error: "m" is a required option'); usage(spec);}
if(is.null(opt[['rpkm.file']])){warning('Error: "r" is a required option'); usage(spec);}

#Set defaults for optional options
if(is.null(opt[['sample.cor.pdf']])){opt[['sample.cor.pdf']] = 'sample.cor.pdf';}
if(is.null(opt[['qc.meta.file']])){opt[['qc.meta.file']] = 'qc.meta.rds';}
if(is.null(opt[['cor.meth']])){opt[['cor.meth']] = 'spearman';}
if(is.null(opt[['max.cor.cutoff']])){opt[['max.cor.cutoff']] = 0.2;}
if(is.null(opt[['cex.axis']])){opt[['cex.axis']] = 0.3;}
if(is.null(opt[['filter.bool']])){opt[['filter.bool']] = TRUE;}
if(is.null(opt[['plot.bool']])){opt[['plot.bool']] = TRUE;}
if(is.null(opt[['lib.dir']])){opt[['lib.dir']] = file.path(scriptPath, '../lib');}
if(is.null(opt[['cor.res.file']])){
    cor.res.list = NA    
}else{
    if(file.exists(opt[['cor.res.file']])){
        cor.res.list = readRDS(opt[['cor.res.file']])
    }else{
        cor.res.list = NA
    }
}

#Error check options
if(length(grep('cor', opt[['sample.cor.pdf']])) == 0){warning('Error: File-name of "-o" option needs to contain the string "cor".'); usage(spec);}


###
#Source fcn libs
###
source(file.path(opt[['lib.dir']], 'expr.lib.R'), chdir = TRUE)
source(file.path(opt[['lib.dir']], 'main.lib.R'), chdir = TRUE)


###
#Execute
###
cor.res.list = sampledist.boxplot(opt[['meta.file']], opt[['rpkm.file']], opt[['sample.cor.pdf']], opt[['qc.meta.file']], opt[['cor.meth']], opt[['max.cor.cutoff']], opt[['cex.axis']], opt[['filter.bool']], opt[['plot.bool']], cor.res.list)


###
#Dump
###
if(!is.null(opt[['cor.res.file']])){
    saveRDS(cor.res.list, file = opt[['cor.res.file']])
}
