#!/usr/bin/env Rscript
#pca -m meta.rds -r rpkm.rds -o pca.pdf -c 1,2,3,4,5
#PCA plots using prcomp to get the pca basis


###
#Get opt
###
library('getopt')

argv = commandArgs(trailingOnly = F)  
scriptPath = dirname(sub("--file=", "", argv[grep("--file", argv)]))
#source(file.path(scriptPath, '../lib/getopt.R')) #If one wants to avoid dependency of installed R package (getopt).
argv = commandArgs(trailingOnly = T)

spec = matrix(c(
  'meta.file', 'm', 1, 'character',
  'rpkm.file', 'r', 1, 'character',
  'pca.pdf', 'o', 1, 'character',
  'plot.comp', 'c', 1, 'character',
  'log.transform', 't', 1, 'character',
  'pc.cutoff', 'u', 1, 'double',
  'filter.bool', 'f', 0, 'logical',
  'greater.than', 'g', 1, 'logical',
  'qc.meta.file', 'q', 1, 'character',
  'strat.factor', 's', 1, 'character',
  'point.cex', 'x', 1, 'double',
  'lib.dir', 'l', 1, 'character',
  'help', 'h', 0, 'logical'
), byrow=TRUE, ncol=4);
opt = getopt(spec)

usage <- function(spec){
  cat(getopt(spec, command = 'pca', usage=TRUE));
  cat(sprintf("PCA plots using prcomp to get the pca basis. Can also set filter based on a single PC.\n"))
  cat(sprintf(" -m meta.file\n\tInput file in rds-format, containing mapping statistics (output by the program get_meta).\n"))
  cat(sprintf(" -r rpkm.file\n\tInput file in rds-format, containing normalized read counts for all samples and features (output by the program get_expr).\n"))
  cat(sprintf(" -o pca.pdf\n\tOutput file to which the plot is printed. It is required to contain the string 'pca'. Default: pca.pdf\n"))
  cat(sprintf(" -c plot.comp\n\tPrincipal components to plot. A comma-separated list of numbers, without any spaces. If only one PC is given a histogram is plotted for that PC. If two PC's are given a scatter plot is made. If more than two PC's then a \"pairs\" scatter-plot is made. Default: 1,2,3,4,5\n"))
  cat(sprintf(" -t log.transform\n\tLog-transform function, to log the data before pc-basis calculation. To skip log-transformation set it to \"0\". Default: log10\n"))
  cat(sprintf(" -u pc.cutoff\n\tApplied if only one PC is provided to the -c option. A line at this value is added to the histogram and if the -f option is TRUE, then samples will be filtered based on this value. By default samples with a value less than this value will be flagged as failed. To flag samples with values greater than or equal to this value, then set the flag -g. Default: 0\n"))
  cat(sprintf(" -f filter\n\tSave qc-failed samples or not to qc.meta.file (option -q). Allowed values: {TRUE, FALSE}. Default: FALSE\n"))
  cat(sprintf(" -g greater.than\n\tBy default samples with a value less than the pc.cutoff (-u value) will be flagged as failed, if the -f flag is turned on. To flag samples with values greater than or equal to the pc.cutoff, then set this flag (-g). Default: FALSE\n"))
  cat(sprintf(" -q qc.meta.file\n\tOutput file in rds-format to which the qc-failed samples are stored. If the file already exists a column is added and if the column already exists (n.genes.expr) it is updated. Default: qc.meta.rds\n"))
  cat(sprintf(" -s strat.factor\n\tStratification factor, which will group the samples in some of the plots. Default: nostrat\n"))
  cat(sprintf(" -x point.cex\n\tText magnification factor. Default: 0.4\n"))
  cat(sprintf(" -l lib.dir\n\tLibrary directory with required R functions. Default: A subdir '../lib' relative to where this program was executed from.\n\n"))
  q(status=1);
}

#Print usage if help flag set
if(!is.null(opt[['help']])){
  usage(spec)
}

#Error check that all required options were set
if(is.null(opt[['meta.file']])){warning('Error: "m" is a required option'); usage(spec);}
if(is.null(opt[['rpkm.file']])){warning('Error: "r" is a required option'); usage(spec);}

#Set defaults for optional options
if(is.null(opt[['pca.pdf']])){opt[['pca.pdf']] = 'pca.pdf';}
if(is.null(opt[['plot.comp']])){opt[['plot.comp']] = '1,2,3,4,5';}
if(is.null(opt[['log.transform']])){opt[['log.transform']] = 'log10';}
if(is.null(opt[['pc.cutoff']])){opt[['pc.cutoff']] = 0;}
if(is.null(opt[['filter.bool']])){opt[['filter.bool']] = FALSE;}
if(is.null(opt[['greater.than']])){opt[['greater.than']] = FALSE;}
if(is.null(opt[['qc.meta.file']])){opt[['qc.meta.file']] = 'qc.meta.rds';}
if(is.null(opt[['strat.factor']])){opt[['strat.factor']] = 'nostrat';}
if(is.null(opt[['point.cex']])){opt[['point.cex']] = 0.4;}
if(is.null(opt[['lib.dir']])){opt[['lib.dir']] = file.path(scriptPath, '../lib');}

#Parse args
plot.comp.arg = strsplit(opt[['plot.comp']], ',')[[1]]
plot.comp.num = tryCatch(as.numeric(plot.comp.arg), warning=function(w) return(list(as.numeric(plot.comp.arg), w)))
if(is.list(plot.comp.num)){
    plot.comp = plot.comp.arg
}else{
    plot.comp = plot.comp.num
}

if(opt[['log.transform']] != '0'){
    log.fcn = get(opt[['log.transform']])
}else{
    log.fcn = 0
}

#Error check options
if(length(grep('pca\\.', opt[['pca.pdf']])) == 0){warning('Error: File-name of "-o" option needs to contain the string "pca.".'); usage(spec);}


###
#Source fcn libs
###
source(file.path(opt[['lib.dir']], 'main.lib.R'), chdir = TRUE)
source(file.path(opt[['lib.dir']], 'basic.lib.R'), chdir = TRUE)
source(file.path(opt[['lib.dir']], 'expr.lib.R'), chdir = TRUE)


###
#Read data
###
meta.mat = readRDS(opt[['meta.file']])
rpkm = readRDS(opt[['rpkm.file']])
dim(rpkm) #Refseq: 24249 x n.samples
dim(meta.mat) #n.samples x n.cols


###
#Execute
###
pca(meta.mat, rpkm, opt[['pca.pdf']], plot.comp, log.fcn, opt[['pc.cutoff']], opt[['filter.bool']], opt[['greater.than']], opt[['qc.meta.file']], opt[['strat.factor']], opt[['point.cex']])
